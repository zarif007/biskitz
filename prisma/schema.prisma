generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id          String      @id @default(uuid())
  role        MessageRole
  type        MessageType
  content     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  projectId   String
  totalTokens Int
  timeTaken   Int
  fragment    Fragment?
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Fragment {
  id         String       @id @default(uuid())
  messageId  String       @unique
  type       FragmentType
  sandboxUrl String?
  title      String
  files      Json
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  message    Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Project {
  id          String      @id @default(uuid())
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  packageType PackageType
  tddEnabled  Boolean     @default(false)
  messages    Message[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  projects      Project[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  BUSINESS_ANALYST
  SYSTEM_ARCHITECT
  DEVELOPER
  TESTER
  SECURITY_ANALYST
  DEV_OPS
}

enum MessageType {
  RESULT
  ERROR
}

enum FragmentType {
  DOC
  CODE
}

enum PackageType {
  NPM
  COMPONENT
  SDK
}
